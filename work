= image.nvim

* Documentation
  ** Overview
    *image.nvim* is a plugin that attempts to add image support to Neovim.

    [preview]

    Goals:
      - Provide a simple Lua API for rendering and clearing images.
      - Provide the complex window, buffer, and event management logic for common use cases.
      - Provide a set of integrations for popular technologies like Markdown, LaTeX, etc.
      - Support multiple rendering backends and sizing strategies.
      - Be easily extended with custom integrations and renderers.
      - Focus on supporting rendering inside *tmux*.

    Features:
      API:
        [x] render an image at an arbitrary position
        [x] clear an image
        [x] clear all images
        [ ] render an image relative to a window
        [ ] render an image relative to a window (buffer-attached)
      Backends:
        [x] ueberzug backend
        [ ] kitty backend
      Configuration:
        [ ] global rendering margins/offsets
      Logic:
        [x] handle buffer, insert, scroll, resize, and change events
        [x] account for tabline, number & sign columns
  ** Installation
    *** [lazy.nvim](https://github.com/folke/lazy.nvim)
      @code lua
        {
          "3rd/image.nvim",
          opts = { --[[ config ]] }
        }
      @end
    *** [packer.nvim](https://github.com/wbthomason/packer.nvim)
      @code lua
        {
          "3rd/image.nvim",
          config = function()
            require("image").setup({ --[[ config ]] })
          end
        }
      @end
  ** Configuration
    @code lua
      require("image").setup({
        renderer = "ueberzug", -- "ueberzug" | "kitty"
        integrations = {
          markdown = {
            enabled = true,
          },
        },
        margin = {
          top = 0,
          right = 1,
          bottom = 1,
          left = 0,
        },
      })
    @end

* Development
  [x] core: rearchitect integrations to handle all events internally and only delegate rendering
  [x] markdown: add "height-from-empty-lines" strategy
  [ ] markdown: handle folding
  [ ] ueberzug: throttle/batch calls
  [ ] ueberzug: debug multiple images clearing eachother
  [ ] core: restructure global state
  [ ] log: add debug flag and options (level, file, etc)
  [ ] logic: window-image-buffer binding & event handling
  [ ] logic: deterministic provider ids (win+buf+line should be ok to start)
  [ ] backend: add kitty w/ unicode placeholders https://sw.kovidgoyal.net/kitty/graphics-protocol/#unicode-placeholders
  [ ] logic: winbar crop
  [ ] logic: apply global margin
  [ ] ops: setup clean test env
